#!/usr/bin/env bash

# The Cloud Foundry Python Buildpack. This script accepts parameters for a build
# directory, a cache directory, and a directory for app environment variables.
#
#     $ ./bin/supply <build_dir> <cache_dir> <deps_dir> <deps_index>

# Fail fast and fail hard.
set -euo pipefail

# Paths.
export BUILDPACK_PATH=$(dirname $(readlink -f ${BASH_SOURCE%/*}))
export BIN_DIR=$BUILDPACK_PATH/bin
export BUILD_DIR=$1
export CACHE_DIR=$2
export DEPS_DIR=$3
export DEPS_IDX=$4

source $BUILDPACK_PATH/compile-extensions/lib/common
source $BIN_DIR/utils

$BUILDPACK_PATH/compile-extensions/bin/check_stack_support

$BUILDPACK_PATH/compile-extensions/bin/check_buildpack_version $BUILDPACK_PATH $CACHE_DIR

env_vars=$($BUILDPACK_PATH/compile-extensions/bin/build_path_from_supply $DEPS_DIR)
for env_var in $env_vars; do
  export $env_var
done

#setup directories
mkdir -p $DEPS_DIR/$DEPS_IDX/bin
mkdir -p $DEPS_DIR/$DEPS_IDX/env
mkdir -p $DEPS_DIR/$DEPS_IDX/include
mkdir -p $DEPS_DIR/$DEPS_IDX/lib
mkdir -p $DEPS_DIR/$DEPS_IDX/pkgconfig
mkdir -p $DEPS_DIR/$DEPS_IDX/profile.d

# Install apt packages if apt.install exists and continue
if [ -f $BUILD_DIR/apt.install ]; then
  echo "------- APT-GET INSTALLING -------"
  source $BIN_DIR/steps/apt-install
  echo "------- APT-GET INSTALL ENDED -------"
fi

if [ -f $BUILD_DIR/environment.yml ]; then
  echo "----------------- USING CONDA BUILDPACK -----------------"

  # Experimental pre_compile hook.
  pushd $BUILD_DIR >/dev/null
    source $BIN_DIR/steps/hooks/pre_compile
  popd >/dev/null

  $BIN_DIR/steps/conda-supply

  $BUILDPACK_PATH/compile-extensions/bin/write_config_yml $BUILDPACK_PATH $DEPS_DIR/$DEPS_IDX
  exit 0
fi

# Prepend proper environment variables for Python use.
export PYTHONUNBUFFERED=1
export LANG=${LANG:-en_US.UTF-8}

set-env-prepend PATH $DEPS_DIR/$DEPS_IDX/bin
set-env-prepend LD_LIBRARY_PATH $DEPS_DIR/$DEPS_IDX/lib

# Switch to the repo's context.
cd $BUILD_DIR

# Warn for lack of Procfile.
if [[ ! -f Procfile ]]; then
  puts-warn 'Warning: Your application is missing a Procfile. This file tells Cloud Foundry how to run your application.'
  puts-warn 'Learn more: https://docs.cloudfoundry.org/buildpacks/prod-server.html#procfile'
fi

# Restore old artifacts from the cache.
# (Move cache dirs to build dir (will copy back after build))
mv $CACHE_DIR/python $DEPS_DIR/$DEPS_IDX/python &> /dev/null || true
if [[ -d $CACHE_DIR/src ]]; then
  mv $CACHE_DIR/src $DEPS_DIR/$DEPS_IDX/src &> /dev/null || true
fi

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile

# Pipenv Python version support.
$BIN_DIR/steps/pipenv-python-version.rb $BUILD_DIR

# Install Python,.
source $BIN_DIR/steps/python

# Install pip-pop
source $BIN_DIR/steps/pip-pop

# Pipenv support.
source $BIN_DIR/steps/pipenv

# If no requirements.txt file given, assume `setup.py develop` is intended.
if [ ! -f requirements.txt ]; then
  echo "-e ." > requirements.txt
fi

source $BIN_DIR/steps/cryptography

source $BIN_DIR/steps/pylibmc

# Automatic configuration for Gunicorn's ForwardedAllowIPS setting.
echo "export FORWARDED_ALLOW_IPS='*'" > $DEPS_DIR/$DEPS_IDX/profile.d/python.gunicorn.sh

set_default_profile_d PYTHONHASHSEED random
echo random > $DEPS_DIR/$DEPS_IDX/env/PYTHONHASHSEED

set_default_profile_d PYTHONPATH "\$DEPS_DIR/$DEPS_IDX"
echo "$DEPS_DIR/$DEPS_IDX" > $DEPS_DIR/$DEPS_IDX/env/PYTHONPATH

set_default_profile_d LANG en_US.UTF-8
echo $LANG > $DEPS_DIR/$DEPS_IDX/env/LANG

append_profile_d PYTHONHOME "\$DEPS_DIR/$DEPS_IDX/python"
echo $DEPS_DIR/$DEPS_IDX/python > $DEPS_DIR/$DEPS_IDX/env/PYTHONHOME

append_profile_d PYTHONUNBUFFERED 1
echo 1 > $DEPS_DIR/$DEPS_IDX/env/PYTHONUNBUFFERED

echo "$DEPS_DIR/$DEPS_IDX/lib" > $DEPS_DIR/$DEPS_IDX/env/LIBRARY_PATH

# Write config.yml
$BUILDPACK_PATH/compile-extensions/bin/write_config_yml $BUILDPACK_PATH $DEPS_DIR/$DEPS_IDX

env_vars=$($BUILDPACK_PATH/compile-extensions/bin/build_path_from_supply $DEPS_DIR)
for env_var in $env_vars; do
  export $env_var
done

source $BIN_DIR/steps/mercurial

# Uninstall removed dependencies with Pip.
source $BIN_DIR/steps/pip-uninstall

# Install dependencies with Pip (where the magic happens).
source $BIN_DIR/steps/pip-install

# Support for NLTK corpora.
$BIN_DIR/steps/nltk

$BIN_DIR/steps/rewrite-shebang

# cache everything
cp -Rlf $DEPS_DIR/$DEPS_IDX/python $CACHE_DIR/
if [[ -d $DEPS_DIR/$DEPS_IDX/src ]]; then
  cp -Rlf $DEPS_DIR/$DEPS_IDX/src $CACHE_DIR/ &> /dev/null || true
fi
